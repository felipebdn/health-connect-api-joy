generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  cpf          String   @unique
  password     String
  phone        String   @unique
  providerCode String
  duration     Int
  birthday     DateTime
  occupation   String
  specialty    String
  price        Int
  education    String?
  description  String?
  addressId    String?  @map("address_id")

  address Address? @relation(fields: [addressId], references: [id])

  events          Event[]
  appointments    Appointment[]
  institutions    ProviderInstitution[]
  rating          Rating[]
  AffiliationCode AffiliationCode[]

  @@map("providers")
}

model Rating {
  id            String   @id @default(cuid())
  rating        Int
  description   String?
  name          String
  providerId    String   @map("provider_id")
  appointmentId String   @map("appointment_id")
  patientId     String   @map("patient_id")
  createdAt     DateTime @default(now()) @map("created_at")

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  provider    Provider    @relation(fields: [providerId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])

  @@map("ratings")
}

model Institution {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  password        String
  institutionName String
  cnpj            String?  @unique
  phone           String?  @unique
  addressId       String?  @map("address_id")
  createdAt       DateTime @default(now()) @map("created_at")

  address Address? @relation(fields: [addressId], references: [id])

  providers       ProviderInstitution[]
  appointments    Appointment[]
  events          Event[]
  AffiliationCode AffiliationCode[]

  @@map("institutions")
}

enum StatusAffiliation {
  ACTIVE
  PAUSED
}

model ProviderInstitution {
  providerId    String            @map("provider_id")
  institutionId String            @map("institution_id")
  enrolledAt    DateTime          @default(now())
  status        StatusAffiliation @default(ACTIVE)

  provider    Provider    @relation(fields: [providerId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])

  @@id([providerId, institutionId])
  @@map("provider_institution")
}

model Address {
  id         String   @id @default(cuid())
  street     String
  number     String?
  district   String
  complement String?
  zipCode    String   @map("zip_code")
  city       String
  state      String
  createdAt  DateTime @default(now()) @map("created_at")

  patients     Patient[]
  institutions Institution[]
  providers    Provider[]

  @@map("addresses")
}

model Patient {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  cpf       String   @unique
  password  String
  phone     String   @unique
  birthday  DateTime
  addressId String?  @map("address_id")

  address Address? @relation(fields: [addressId], references: [id])

  appointments Appointment[]
  rating       Rating[]

  @@map("patients")
}

enum Title {
  availability
  appointment
}

model Event {
  id                  String   @id @default(cuid())
  title               Title
  startTime           DateTime @map("start_time")
  endTime             DateTime @map("end_time")
  startTimezone       String   @map("start_timezone")
  endTimezone         String   @map("end_timezone")
  recurrenceRule      String?  @map("recurrence_rule")
  recurrenceException String?  @map("recurrence_exception")
  recurrenceID        String?  @map("recurrence_id")
  providerId          String   @map("provider_id")
  institutionId       String?  @map("institution_id")

  institution Institution? @relation(fields: [institutionId], references: [id])
  provider    Provider     @relation(fields: [providerId], references: [id])
  event       Event?       @relation("RecurrenceRelation", fields: [recurrenceID], references: [id], onDelete: SetNull)

  appointments Appointment[]
  Event        Event[]       @relation("RecurrenceRelation")

  @@map("events")
}

enum EntityEnumAuthCode {
  INSTITUTION
  PATIENT
  PROVIDER
}

model AuthCode {
  id        String             @id @default(cuid())
  code      String             @unique
  entity    EntityEnumAuthCode
  entityId  String
  createdAt DateTime           @default(now()) @map("created_at")

  @@map("auth_codes")
}

model AffiliationCode {
  id            String   @id @default(cuid())
  code          String   @unique
  providerId    String   @map("provider_id")
  institutionId String   @map("institution_id")
  createdAt     DateTime @default(now()) @map("created_at")

  provider    Provider    @relation(fields: [providerId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])

  @@map("affiliation_codes")
}

model Appointment {
  id            String  @id @default(cuid())
  description   String?
  providerId    String  @map("provider_id")
  eventId       String  @map("event_id")
  institutionId String? @map("institution_id")
  patientId     String  @map("patient_id")

  createdAt DateTime @default(now()) @map("created_at")

  institution Institution? @relation(fields: [institutionId], references: [id])
  provider    Provider     @relation(fields: [providerId], references: [id])
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  patient     Patient      @relation(fields: [patientId], references: [id])
  rating      Rating[]

  @@map("appointments")
}

enum TypeUser {
  INSTITUTION
  PATIENT
  PROVIDER
}

enum TypeNotification {
  MAKE_RATING
  APPOINTMENT_ALERT
}

model Notification {
  id               String           @id @default(uuid())
  title            String
  typeNotification TypeNotification
  content          String
  readAt           DateTime?        @map("read_at")
  createdAt        DateTime         @default(now()) @map("created_at")

  recipientId String
  typeUser    TypeUser

  @@map("notifications")
}
