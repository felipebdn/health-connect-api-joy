# Etapa 1: Instalação de dependências com Bun
FROM oven/bun:1.1.13 AS dependencies

WORKDIR /app

# Copia apenas arquivos de dependência para instalar mais rápido
COPY bun.lockb package.json ./
RUN bun install --frozen-lockfile

# Etapa 2: Build com Node.js
FROM node:20-alpine AS build

WORKDIR /app

# Copia node_modules da etapa anterior
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package.json ./package.json

# Copia todo o projeto
COPY . .

# Prisma generate (se necessário)
RUN npx prisma generate

# Compila com SWC
RUN npx swc src -d dist

# Etapa 3: Produção (Node puro ou Distroless opcionalmente)
FROM node:20-alpine AS production

WORKDIR /app

COPY --from=build /app/dist ./dist
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/package.json ./package.json

EXPOSE 3333

CMD ["node", "dist/src/infra/http/server.js"]




# # Etapa base
# FROM node:22 AS base
# RUN npm install -g pnpm

# # Etapa de instalação de dependências
# FROM base AS dependencies
# WORKDIR /usr/src/app
# COPY package.json pnpm-lock.yaml prisma ./
# RUN pnpm install --frozen-lockfile

# # Etapa de build
# FROM base AS build
# WORKDIR /usr/src/app
# COPY . .
# COPY --from=dependencies /usr/src/app/node_modules ./node_modules
# RUN pnpm prisma generate
# RUN pnpm build
# # Garanta que apenas dependências de produção estão disponíveis
# RUN pnpm prune --prod

# # Etapa de produção
# FROM node:22-alpine AS production
# WORKDIR /usr/src/app
# RUN npm install -g pnpm

# COPY --from=build /usr/src/app/dist ./dist
# COPY --from=build /usr/src/app/node_modules ./node_modules
# COPY --from=build /usr/src/app/package.json ./package.json

# EXPOSE 3333
# CMD ["node", "dist/src/infra/http/server.js"]
